[
    {
        "user_message": "Create a Double Pendulum with Spring-Damper\nA double pendulum system connected by a spring-damper mechanism that allows the two pendulums to move dynamically under the influence of gravity and the spring force.\n\nComponents:\nTwo pendulums connected by a revolute joint.\nA spring-damper element connecting the two pendulums.\n",
        "model_1_response": "```python\nimport pychrono as chrono\nimport pychrono.irrlicht as chronoirr\n\n\nrest_length = 1.5\nspring_coef = 50\ndamping_coef = 1\n\n\nsys = chrono.ChSystemNSC()\nsys.SetGravitationalAcceleration(chrono.ChVector3d(0, -9.81, 0))\n\nground = chrono.ChBody()\nsys.AddBody(ground)\nground.SetFixed(True)\nground.EnableCollision(False)\n\nsph_1 = chrono.ChVisualShapeSphere(0.2)\nground.AddVisualShape(sph_1, chrono.ChFramed(chrono.ChVector3d(-3, 0, 0)))\n\nbody_1 = chrono.ChBody()\nsys.AddBody(body_1)\nbody_1.SetPos(chrono.ChVector3d(-3, 1, 0))\nbody_1.SetFixed(False)\nbody_1.EnableCollision(False)\nbody_1.SetMass(1)\nbody_1.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Attach a visualization asset.\nbox_1 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_1.SetColor(chrono.ChColor(0.6, 0, 0))\nbody_1.AddVisualShape(box_1)\n\n# Create a revolute joint between body_1 and ground.\n# The revolute joint will allow rotation around the Z axis of the joint frame.\nrev_1 = chrono.ChLinkLockRevolute()\nrev_1.Initialize(body_1, ground, chrono.ChFramed(chrono.ChVector3d(-3, 0, 0)))\nsys.AddLink(rev_1)\n\n# Attach a visualization asset.\nsph_2 = chrono.ChVisualShapeSphere(0.2)\nrev_1.AddVisualShape(sph_2, chrono.ChFramed(chrono.ChVector3d(-3, 0, 0)))\n\n# Create a second body.\nbody_2 = chrono.ChBody()\nsys.AddBody(body_2)\nbody_2.SetPos(chrono.ChVector3d(-3, 3, 0))\nbody_2.SetFixed(False)\nbody_2.EnableCollision(False)\nbody_2.SetMass(1)\nbody_2.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Attach a visualization asset.\nbox_2 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_2",
        "model_2_response": "Creating a double pendulum with a spring-damper mechanism in PyChrono involves defining the pendulum bodies, the joints, and the spring-damper element. Below is a sample code that demonstrates how to set up such a system.\n\n### Prerequisites\nMake sure you have PyChrono installed. You can install it using pip if you haven't done so:\n\n```bash\npip install pychrono\n```\n\n### Code Example\n\n```python\nimport pychrono as chrono\n\n# Create the Chrono system\nsystem = chrono.ChSystemNSC()\n\n# Parameters\nlength1 = 1.0  # Length of the first pendulum\nlength2 = 1.0  # Length of the second pendulum\nmass1 = 1.0    # Mass of the first pendulum\nmass2 = 1.0    # Mass of the second pendulum\nspring_constant = 100.0  # Spring constant\ndamping_coefficient = 5.0  # Damping coefficient\n\n# Create the first pendulum\npendulum1 = chrono.ChBody()\npendulum1.SetMass(mass1)\npendulum1.SetInertiaXX(chrono.ChVectorD(0.1, 0.1, 0.1))\npendulum1.SetPos(chrono.ChVectorD(0, length1, 0))\npendulum1.SetCollide(False)\nsystem.Add(pendulum1)\n\n# Create the second pendulum\npendulum2 = chrono.ChBody()\npendulum2.SetMass(mass2)\npendulum2.SetInertiaXX(chrono.ChVectorD(0.1, 0.1, 0.1))\npendulum2.SetPos(chrono.ChVectorD(0, length1 + length2, 0))\npendulum2.SetCollide(False)\nsystem.Add(pendulum2)\n\n# Create revolute joint between the ground and the first pendulum\njoint1 = chrono.ChLinkLockRevolute()\njoint1.Initialize(system.GetGround(), pendulum1, chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.ChQuaternionD(1, 0, 0, 0)))\nsystem.Add(joint1)\n\n# Create revolute joint between the first and second pendulum\njoint2 = chrono.ChLinkLockRevolute()\njoint2.Initialize(pendulum1, pendulum2, chrono.ChCoordsysD(chrono.ChVectorD(0, length1, 0),"
    }
]